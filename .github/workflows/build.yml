name: SonarCloud Analysis for React
on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '18'
      branch-name:
        required: false
        type: string
        default: 'main'
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SONAR_PROJECT_KEY:
        required: true
jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all history is downloaded for accurate SonarCloud scan

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install dependencies
        run: npm ci

      # Ejecuta las pruebas y genera el reporte de cobertura
      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Build React app
        run: npm run build

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.branch.name=${{ inputs.branch-name }}
            -Dsonar.sources=src
            -Dsonar.exclusions=node_modules/**,public/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Wait for SonarCloud Quality Gate
        run: |
          sleep 20
          SONAR_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r .projectStatus.status)
          echo "SonarCloud Quality Gate Status: $SONAR_STATUS"
          if [[ "$SONAR_STATUS" != "OK" ]]; then
            echo "‚ùå Quality Gate failed. PR cannot be merged."
            exit 1
          fi